"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9623],{5955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"extras-testing-tools/effectie/effectie","title":"Extras - Testing Tools for Effectie","description":"Module","source":"@site/../generated-docs/docs/extras-testing-tools/effectie/effectie.md","sourceDirName":"extras-testing-tools/effectie","slug":"/extras-testing-tools/effectie/","permalink":"/docs/extras-testing-tools/effectie/","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Effectie","id":"effectie","title":"Extras - Testing Tools for Effectie"},"sidebar":"tutorialSidebar","previous":{"title":"Cats","permalink":"/docs/extras-testing-tools/cats/"},"next":{"title":"Getting Started","permalink":"/docs/extras-concurrent/"}}');var i=t(4848),a=t(8453);const s={sidebar_position:4,sidebar_label:"Effectie",id:"effectie",title:"Extras - Testing Tools for Effectie"},l=void 0,c={},r=[{value:"Module",id:"module",level:2},{value:"<code>StubToolsFx.stub</code>",id:"stubtoolsfxstub",level:2},{value:"Example",id:"example",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,i.jsx)(n.p,{children:"Core"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-testing-tools" % "0.46.1"\n'})}),"\n",(0,i.jsx)(n.p,{children:"For cats"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-testing-tools-cats" % "0.46.1"\n'})}),"\n",(0,i.jsx)(n.p,{children:"For effectie"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-testing-tools-effectie" % "0.46.1"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"stubtoolsfxstub",children:(0,i.jsx)(n.code,{children:"StubToolsFx.stub"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"StubToolsFx.stub"})," is a tool for a stub (a simple function for testing) so that you don't need to use mock frameworks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import cats.{Functor, Monad}\nimport cats.syntax.all._\n\nimport effectie.core.Fx\n\nimport extras.testing.StubToolsFx\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def fooStub[F[_]: Fx](f: => Option[A]): FooStub[F] = new FooStub[F] {\n  def foo: F[A] = StubToolsFx.stub(f) // F[A]\n}\n// If f is None, it will raise MissingStubException with the line number pointing where it's missing\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def fooStub[F[_]: Fx: Functor](f: => Option[() => A]): FooStub[F] = new FooStub[F] {\n  def foo(): F[A] = StubToolsFx.stub(f).map(_()) // F[A]\n}\n// If f is None, it will raise MissingStubException with the line number pointing where it's missing\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def fooStub[F[_]: Fx: Functor](f: => Option[A => B]): FooStub[F] = new FooStub[F] {\n  def foo(a: A): F[B] = StubToolsFx.stub(f).map(_(a)) // F[B]\n}\n// If f is None, it will raise MissingStubException with the line number pointing where it's missing\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"def fooStub[F[_]: Fx: Monad](f: => Option[A => F[B]]): FooStub[F] = new FooStub[F] {\n  def foo(a: A): F[B] = StubToolsFx.stub(f).flatMap(_(a)) // F[B]\n}\n// If f is None, it will raise MissingStubException with the line number pointing where it's missing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"e.g.)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.Monad\nimport cats.syntax.all._\nimport eu.timepit.refined.types.all._\nimport eu.timepit.refined.cats._\nimport eu.timepit.refined.auto._\nimport io.estatico.newtype.macros.newtype\nimport extras.testing.StubToolsFx\n\nimport effectie.core._\nimport effectie.syntax.all._\n\nobject types {\n  @newtype case class Id(value: PosInt)\n  @newtype case class Name(value: NonEmptyString)\n}\nimport types._\n\ntrait MyService[F[_]] {\n  def getName(id: Id): F[Option[Name]]\n}\n\nobject MyServiceStub {\n  def apply[F[_]: Fx: Monad](f: => Option[Id => F[Option[Name]]]): MyService[F] = new MyService[F] {\n    override def getName(id: Id): F[Option[Name]] = StubToolsFx.stub(f).flatMap(_(id))\n  }\n}\n\nclass Hello[F[_]: Monad](myService: MyService[F]) {\n  def hello(id: Id): F[String] = {\n    myService.getName(id)\n      .map { maybeName =>\n        maybeName.fold(s"No name found for id ${id.value}")(name => s"Hello ${name.value}")\n      }\n  }\n}\n\nval expectedId = Id(1)\n// expectedId: Id = 1\nval expectedName = Name("Kevin")\n// expectedName: Name = Kevin\n\nimport cats.effect._\n\nimport effectie.instances.ce2.fx._\n\nval myService: MyService[IO] = MyServiceStub(((id: Id) =>\n  if (id.value === expectedId.value)\n    pureOfSome(expectedName)\n  else\n    pureOfNone\n).some)\n// myService: MyService[IO] = repl.MdocSession$MdocApp0$MyServiceStub$$anon$1@6ba31b98\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"val hello = new Hello[IO](myService)\n// hello: Hello[IO] = repl.MdocSession$MdocApp0$Hello@7398f9bd\nhello.hello(Id(1))\n  .map(println)\n  .unsafeRunSync()\n// Hello Kevin\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"hello.hello(Id(2))\n  .map(println)\n  .unsafeRunSync()\n// No name found for id 2\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"/* If you don't expect Hello to use MyService.getName,\n * you can simply remove feeding the function for that operation\n * and StubTools let you know where it fails if Hello uses MySerivce.getName.\n */\nval myService2: MyService[IO] = MyServiceStub(none)\n// myService2: MyService[IO] = repl.MdocSession$MdocApp0$MyServiceStub$$anon$1@68601254\nval hello2 = new Hello(myService2)\n// hello2: Hello[[A]IO[A]] = repl.MdocSession$MdocApp0$Hello@4d0fdf9c\nhello2.hello(Id(1))\n  .attempt\n  .map(println)\n  .unsafeRunSync()\n// Left(extras.testing.StubTools$MissingStubException: \n// >> Missing Stub implementation at\n// >>   repl.MdocSession$MdocApp0$MyServiceStub$$anon$1$$anonfun$getName$1.apply(effectie.md:54)\n// >>   ---\n// >>   Details:\n// >>   repl.MdocSession$MdocApp0$MyServiceStub$$anon$1$$anonfun$getName$1.apply(effectie.md:54)\n//        at repl.MdocSession$MdocApp0$MyServiceStub$$anon$1$$anonfun$getName$1.apply(effectie.md:54)\n//        at cats.effect.IO$.fromOption(IO.scala:1460)\n//        at effectie.instances.ce2.fxCtor$ioFxCtor$.fromOption(fxCtor.scala:28)\n//        at effectie.instances.ce2.fxCtor$ioFxCtor$.fromOption(fxCtor.scala:11)\n//        at effectie.instances.ce2.fx$ioFx$.fromOption(fx.scala:29)\n//        at effectie.instances.ce2.fx$ioFx$.fromOption(fx.scala:10)\n//        at extras.testing.StubToolsFx$StubToolsFxPartiallyApplied$.$anonfun$apply$1(StubToolsFx.scala:26)\n//        at cats.effect.internals.IORunLoop$.step(IORunLoop.scala:319)\n//        at cats.effect.IO.unsafeRunTimed(IO.scala:338)\n//        at cats.effect.IO.unsafeRunSync(IO.scala:256)\n//        at repl.MdocSession$MdocApp0$.<clinit>(effectie.md:122)\n//        at repl.MdocSession$MdocApp.<init>(effectie.md:5)\n//        at repl.MdocSession$.app(effectie.md:3)\n//        at mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$2(DocumentBuilder.scala:89)\n//        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)\n//        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)\n//        at scala.Console$.withErr(Console.scala:193)\n//        at mdoc.internal.document.DocumentBuilder$$doc$.$anonfun$build$1(DocumentBuilder.scala:89)\n//        at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)\n//        at scala.util.DynamicVariable.withValue(DynamicVariable.scala:59)\n//        at scala.Console$.withOut(Console.scala:164)\n//        at mdoc.internal.document.DocumentBuilder$$doc$.build(DocumentBuilder.scala:88)\n//        at mdoc.internal.markdown.MarkdownBuilder$.$anonfun$buildDocument$2(MarkdownBuilder.scala:48)\n//        at mdoc.internal.markdown.MarkdownBuilder$$anon$1.run(MarkdownBuilder.scala:105)\n// )\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"NOTE",type:"caution",children:[(0,i.jsxs)(n.p,{children:["Why not just use mock framework for convenience? To answer that, please read ",(0,i.jsx)(n.a,{href:"https://xebia.com/blog/pitfalls-mocking-tests-how-to-avoid",children:"Pitfalls of Mocking in tests"})," from ",(0,i.jsx)(n.a,{href:"https://xebia.com",children:"Xebia Functional"})," (formerly known as 47 Degrees)"]}),(0,i.jsxs)(n.p,{children:["Besides what the blog tells you, mock frameworks often make you do bad practice like testing the implementation details with ",(0,i.jsx)(n.code,{children:"verify"}),"."]}),(0,i.jsxs)(n.p,{children:["There is also an issue when your mock is not correctly set. You may get a ",(0,i.jsx)(n.code,{children:"NullPointerException"})," for that, but it doesn't tell you where it's from and why you get it."]})]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(6540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);