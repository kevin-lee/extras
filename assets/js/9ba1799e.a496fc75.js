"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[165],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=l(r),f=o,u=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return r?t.createElement(u,i(i({ref:n},c),{},{components:r})):t.createElement(u,i({ref:n},c))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6738:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var t=r(7462),o=(r(7294),r(3905));const a={sidebar_position:2,id:"render-syntax",title:"Syntax"},i=void 0,d={unversionedId:"extras-render/render-syntax",id:"extras-render/render-syntax",title:"Syntax",description:"Render Syntax",source:"@site/../generated-docs/docs/extras-render/syntax.md",sourceDirName:"extras-render",slug:"/extras-render/render-syntax",permalink:"/docs/extras-render/render-syntax",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"render-syntax",title:"Syntax"},sidebar:"tutorialSidebar",previous:{title:"Render",permalink:"/docs/extras-render/render"},next:{title:"Getting Started",permalink:"/docs/extras-cats/"}},s={},l=[{value:"<code>Render</code> Syntax",id:"render-syntax",level:2},{value:"<code>A.render</code>",id:"arender",level:3},{value:"<code>List[A].renderString</code>",id:"listarenderstring",level:3},{value:"<code>render</code> String interpolation",id:"render-string-interpolation",level:2}],c={toc:l};function m(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"render-syntax"},(0,o.kt)("inlineCode",{parentName:"h2"},"Render")," Syntax"),(0,o.kt)("p",null,"There is ",(0,o.kt)("inlineCode",{parentName:"p"},"Render")," syntax provided for convenience."),(0,o.kt)("h3",{id:"arender"},(0,o.kt)("inlineCode",{parentName:"h3"},"A.render")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"(a: A).render // when `Render[A]` is available\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.render.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"ID=${foo.id.toString} / Name=${foo.name}"\n}\n\nimport extras.render.syntax._\n\ndef bar[A: Render](a: A): Unit =\n  println(s">> a: ${a.render}")\n\nFoo(1, "Something").render\n// res1: String = "ID=1 / Name=Something"\n\nbar(Foo(1, "Something"))\n// >> a: ID=1 / Name=Something\n')),(0,o.kt)("h3",{id:"listarenderstring"},(0,o.kt)("inlineCode",{parentName:"h3"},"List[A].renderString")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"List[A](a..).renderString // when Render[A] is available\nList[A](a..).renderString(delimiter) // when Render[A] is available\nList[A](a..).renderString(start, delimiter, end) // when Render[A] is available\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.render.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"{ID=${foo.id.toString},Name=${foo.name}}"\n}\n\nimport extras.render.syntax._\n\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString\n// res4: String = "{ID=1,Name=A}{ID=2,Name=B}{ID=3,Name=C}"\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString(", ")\n// res5: String = "{ID=1,Name=A}, {ID=2,Name=B}, {ID=3,Name=C}"\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString("[", ", ", "]")\n// res6: String = "[{ID=1,Name=A}, {ID=2,Name=B}, {ID=3,Name=C}]"\n')),(0,o.kt)("h2",{id:"render-string-interpolation"},(0,o.kt)("inlineCode",{parentName:"h2"},"render")," String interpolation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'render"TEXT $someRenderable"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.render.Render\nimport extras.render.syntax._\n\nfinal case class Foo(id: Int, name: String)\n\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"{ID=${foo.id.toString},Name=${foo.name}}"\n}\n\nval foo1 = Foo(1, "A")\n// foo1: Foo = Foo(id = 1, name = "A")\nval foo2 = Foo(2, "B")\n// foo2: Foo = Foo(id = 2, name = "B")\nval foo3 = Foo(3, "C")\n// foo3: Foo = Foo(id = 3, name = "C")\n\nrender">>> $foo1 > $foo2 >> $foo3 <<<"\n// res8: String = ">>> {ID=1,Name=A} > {ID=2,Name=B} >> {ID=3,Name=C} <<<"\n\nval foos = List(foo1, foo2, foo3)\n// foos: List[Foo] = List(\n//   Foo(id = 1, name = "A"),\n//   Foo(id = 2, name = "B"),\n//   Foo(id = 3, name = "C")\n// )\n\nrender">>> $foo1 > $foo2 >> $foo3 - ${foos.renderString("[", ", ", "]")} <<<"\n// res9: String = ">>> {ID=1,Name=A} > {ID=2,Name=B} >> {ID=3,Name=C} - [{ID=1,Name=A}, {ID=2,Name=B}, {ID=3,Name=C}] <<<"\n')))}m.isMDXComponent=!0}}]);