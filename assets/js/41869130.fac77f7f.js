"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5323],{224:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>t});const r=JSON.parse('{"id":"extras-circe/codecs-codec","title":"Codec","description":"There are extension methods for Encoder, Decoder and Codec.","source":"@site/../generated-docs/docs/extras-circe/codecs-codec.md","sourceDirName":"extras-circe","slug":"/extras-circe/codecs-codec","permalink":"/docs/extras-circe/codecs-codec","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"id":"codecs-codec","title":"Codec"},"sidebar":"tutorialSidebar","previous":{"title":"Encoder","permalink":"/docs/extras-circe/codecs-encoder"},"next":{"title":"Getting Started","permalink":"/docs/extras-hedgehog/"}}');var c=i(4848),o=i(8453);const s={sidebar_position:3,id:"codecs-codec",title:"Codec"},a=void 0,d={},t=[{value:"Module",id:"module",level:2},{value:"Encoder[A].renameFields",id:"encoderarenamefields",level:2},{value:"Example",id:"example",level:3},{value:"Comparison",id:"comparison",level:3},{value:"Decoder[A].renameFields",id:"decoderarenamefields",level:2},{value:"Example",id:"example-1",level:3},{value:"Comparison",id:"comparison-1",level:3},{value:"Codec[A].renameFields (Encoder +  Decoder)",id:"codecarenamefields-encoder---decoder",level:2},{value:"Example",id:"example-2",level:3},{value:"Comparison",id:"comparison-2",level:3}];function m(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.p,{children:["There are extension methods for ",(0,c.jsx)(n.code,{children:"Encoder"}),", ",(0,c.jsx)(n.code,{children:"Decoder"})," and ",(0,c.jsx)(n.code,{children:"Codec"}),"."]}),"\n",(0,c.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-circe" % "0.49.0"\n'})}),"\n",(0,c.jsxs)(n.p,{children:["or for ",(0,c.jsx)(n.code,{children:"Scala.js"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %%% "extras-circe" % "0.49.0"\n'})}),"\n",(0,c.jsx)(n.h2,{id:"encoderarenamefields",children:"Encoder[A].renameFields"}),"\n",(0,c.jsxs)(n.p,{children:["With ",(0,c.jsx)(n.code,{children:"renameFields"}),", you can make the existing JSON ",(0,c.jsx)(n.code,{children:"Encoder"})," to rename the existing fields."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import extras.circe.codecs.encoder._\n\nEncoder[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Encoder[A]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingEncoder: Encoder[Something] =\n    deriveEncoder[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\nsomething.asJson\n// res1: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nsomething.asJson.spaces2\n// res2: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n'})}),"\n",(0,c.jsx)(n.h3,{id:"comparison",children:"Comparison"}),"\n",(0,c.jsxs)(n.p,{children:["Let's compare it with the ",(0,c.jsx)(n.code,{children:"Encoder"})," without ",(0,c.jsx)(n.code,{children:"renameFields"})," syntax."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingEncoder: Encoder[Something] = deriveEncoder\n  implicit val somethingEncoder: Encoder[Something] = originalSomethingEncoder\n    .renameFields(\n      "n" -> "id",\n      "s" -> "name"\n    )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\n\nSomething.originalSomethingEncoder(something)\n// res4: Json = JObject(\n//   value = object[n -> 1,s -> "Vibranium Shield",price -> 999999999]\n// )\nSomething.originalSomethingEncoder(something).spaces2\n// res5: String = """{\n//   "n" : 1,\n//   "s" : "Vibranium Shield",\n//   "price" : 999999999\n// }"""\n\nsomething.asJson\n// res6: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nsomething.asJson.spaces2\n// res7: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n'})}),"\n",(0,c.jsx)(n.h2,{id:"decoderarenamefields",children:"Decoder[A].renameFields"}),"\n",(0,c.jsxs)(n.p,{children:["With ",(0,c.jsx)(n.code,{children:"renameFields"}),", you can make the existing JSON ",(0,c.jsx)(n.code,{children:"Decoder"})," to rename the existing fields."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import extras.circe.codecs.encoder._\n\nDecoder[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Decoder[A]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.decoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingDecoder: Decoder[Something] =\n    deriveDecoder[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval jsonString =\n  """\n  {\n    "id": 1,\n    "name": "Vibranium Shield",\n    "price": 999999999\n  }\n  """ \n// jsonString: String = """\n//   {\n//     "id": 1,\n//     "name": "Vibranium Shield",\n//     "price": 999999999\n//   }\n//   """\n\nimport io.circe.parser._\ndecode[Something](jsonString)\n// res9: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n'})}),"\n",(0,c.jsx)(n.h3,{id:"comparison-1",children:"Comparison"}),"\n",(0,c.jsxs)(n.p,{children:["Let's compare it with the ",(0,c.jsx)(n.code,{children:"Encoder"})," without ",(0,c.jsx)(n.code,{children:"renameFields"})," syntax."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.decoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingDecoder: Decoder[Something] = deriveDecoder\n  implicit val somethingDecoder: Decoder[Something] =\n    originalSomethingDecoder\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval jsonString =\n  """\n  {\n    "id": 1,\n    "name": "Vibranium Shield",\n    "price": 999999999\n  }\n  """\n// jsonString: String = """\n//   {\n//     "id": 1,\n//     "name": "Vibranium Shield",\n//     "price": 999999999\n//   }\n//   """\n\nimport io.circe.parser._\ndecode[Something](jsonString)(Something.originalSomethingDecoder)\n// res11: Either[Error, Something] = Left(\n//   value = DecodingFailure at .n: Missing required field\n// )\n\ndecode[Something](jsonString)\n// res12: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n'})}),"\n",(0,c.jsx)(n.h2,{id:"codecarenamefields-encoder---decoder",children:"Codec[A].renameFields (Encoder +  Decoder)"}),"\n",(0,c.jsxs)(n.p,{children:["With ",(0,c.jsx)(n.code,{children:"renameFields"}),", you can make the existing JSON ",(0,c.jsx)(n.code,{children:"Codec"})," to rename the existing fields."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import extras.circe.codecs.codec._\n\nCodec[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Codec[A]\n'})}),"\n",(0,c.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.codec._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingCodec: Codec[Something] =\n    deriveCodec[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\nsomething.asJson\n// res14: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nval jsonString = something.asJson.spaces2\n// jsonString: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n\nimport io.circe.parser._\ndecode[Something](jsonString)\n// res15: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n'})}),"\n",(0,c.jsx)(n.h3,{id:"comparison-2",children:"Comparison"}),"\n",(0,c.jsxs)(n.p,{children:["Let's compare it with the ",(0,c.jsx)(n.code,{children:"Encoder"})," without ",(0,c.jsx)(n.code,{children:"renameFields"})," syntax."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.codec._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingCodec: Codec[Something] = deriveCodec\n  implicit val somethingCodec: Codec[Something] = originalSomethingCodec\n    .renameFields(\n      "n" -> "id",\n      "s" -> "name"\n    )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\n\nSomething.originalSomethingCodec(something)\n// res17: Json = JObject(\n//   value = object[n -> 1,s -> "Vibranium Shield",price -> 999999999]\n// )\nSomething.originalSomethingCodec(something).spaces2\n// res18: String = """{\n//   "n" : 1,\n//   "s" : "Vibranium Shield",\n//   "price" : 999999999\n// }"""\n\nsomething.asJson\n// res19: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nval jsonString = something.asJson.spaces2\n// jsonString: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n\nimport io.circe.parser._\ndecode[Something](jsonString)(Something.originalSomethingCodec)\n// res20: Either[Error, Something] = Left(\n//   value = DecodingFailure at .n: Missing required field\n// )\n\ndecode[Something](jsonString)\n// res21: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(6540);const c={},o=r.createContext(c);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);