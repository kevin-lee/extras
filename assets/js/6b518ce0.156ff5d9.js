"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3541],{8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>s});var t=a(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},8935:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"extras-refinement/syntax/refinement","title":"refinement Syntax","description":"Module","source":"@site/../generated-docs/docs/extras-refinement/syntax/refinement.md","sourceDirName":"extras-refinement/syntax","slug":"/extras-refinement/syntax/refinement","permalink":"/docs/extras-refinement/syntax/refinement","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"refinement","title":"refinement Syntax"},"sidebar":"tutorialSidebar","previous":{"title":"syntax","permalink":"/docs/extras-refinement/syntax/"},"next":{"title":"string Syntax","permalink":"/docs/extras-refinement/syntax/string"}}');var i=a(4848),r=a(8453);const l={sidebar_position:1,id:"refinement",title:"refinement Syntax"},s=void 0,d={},o=[{value:"Module",id:"module",level:2},{value:"Why <code>refinement</code> syntax?",id:"why-refinement-syntax",level:2},{value:"<code>validateAs</code>",id:"validateas",level:2},{value:"Example: Valid Case",id:"example-valid-case",level:3},{value:"Example: Invalid Case",id:"example-invalid-case",level:3},{value:"Only of them is invalid",id:"only-of-them-is-invalid",level:4},{value:"The other one is invalid",id:"the-other-one-is-invalid",level:4},{value:"More than one invalid",id:"more-than-one-invalid",level:4},{value:"<code>toValue</code>",id:"tovalue",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-refinement" % "0.46.1"\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"why-refinement-syntax",children:["Why ",(0,i.jsx)(n.code,{children:"refinement"})," syntax?"]}),"\n",(0,i.jsxs)(n.p,{children:["When you use ",(0,i.jsx)(n.a,{href:"https://github.com/estatico/scala-newtype",children:"newtype"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/fthomas/refined",children:"refined"})," together\nto have better type-safety, you often have some boilerplate code for runtime value validation\nwhen creating newtype + refinement type just like this."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'YourRefinementType.from(value)\n  .map(YourNewtype(_))\n  .leftMap(err => s"Failed to create YourNewtype: $err")\n  .toEitherNec\n'})}),"\n",(0,i.jsx)(n.p,{children:"There are a few issues here."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["First, you need to create your ",(0,i.jsx)(n.code,{children:"newtype"})," with the newtype constructor and the validated value. e.g.) ",(0,i.jsx)(n.code,{children:".map(YourNewType(_))"})]}),"\n",(0,i.jsxs)(n.li,{children:["If it is invalid, you probably want to add the type name for debugging with ",(0,i.jsx)(n.code,{children:"leftMap"}),". e.g.) ",(0,i.jsx)(n.code,{children:'.leftMap(err => s"Failed to create YourNewtype: $err")'})]}),"\n",(0,i.jsxs)(n.li,{children:["Finally, depending on how to validate, you probably turn the ",(0,i.jsx)(n.code,{children:"Either[String, YourNewType]"})," from the validation into ",(0,i.jsx)(n.code,{children:"EitherNec"})," since you may want to accumulate all the errors from multiple validations. e.g.) ",(0,i.jsx)(n.code,{children:".toEitherNec"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In practice, it may look like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport io.estatico.newtype.macros.newtype\nimport eu.timepit.refined.types.string.NonEmptyString\n\n@newtype case class Name(value: NonEmptyString)\n\nval validNameValue = "Kevin"\n// validNameValue: String = "Kevin"\nNonEmptyString.from(validNameValue)\n  .map(Name(_))\n  .leftMap(err => s"Failed to create Name: $err")\n  .toEitherNec\n// res1: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\n\nval invalidNameValue = ""\n// invalidNameValue: String = ""\nNonEmptyString.from(invalidNameValue)\n  .map(Name(_))\n  .leftMap(err => s"Failed to create Name: $err")\n  .toEitherNec\n// res2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Name: Predicate isEmpty() did not fail."\n//   )\n// )\n'})}),"\n",(0,i.jsx)(n.p,{children:"or this"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport io.estatico.newtype.ops._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id = PositiveInt.from(idValue)\n          .map(Id(_))\n          .leftMap(err => s"Failed to create Types.Id: $err")\n          .toEitherNec\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name = NonEmptyString.from(nameValue)\n            .map(Name(_))\n            .leftMap(err => s"Failed to create Types.Name: $err")\n            .toEitherNec\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Right(\n//   value = Person(id = 999, name = Kevin)\n// )\nprintln(person)\n// Right(Person(999,Kevin))\n'})}),"\n",(0,i.jsx)(n.p,{children:"or invalid case like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val idValue2 = 0\n// idValue2: Int = 0\n\nval id2 = PositiveInt.from(idValue2)\n          .map(Id(_))\n          .leftMap(err => s"Failed to create Types.Id: $err")\n          .toEitherNec\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue2 = ""\n// nameValue2: String = ""\n\nval name2 = NonEmptyString.from(nameValue2)\n            .map(Name(_))\n            .leftMap(err => s"Failed to create Types.Name: $err")\n            .toEitherNec\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person2 = (id2, name2).parMapN(Person.apply)\n// person2: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Append(\n//     leftNE = Singleton(\n//       a = "Failed to create Types.Id: Predicate failed: (0 > 0)."\n//     ),\n//     rightNE = Singleton(\n//       a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//     )\n//   )\n// )\nprintln(person2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0)., Failed to create Types.Name: Predicate isEmpty() did not fail.))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"validateas",children:(0,i.jsx)(n.code,{children:"validateAs"})}),"\n",(0,i.jsxs)(n.p,{children:["The boilerplate code issue in newtype + refinement type creation can be fixed with ",(0,i.jsx)(n.code,{children:"extras"})," ",(0,i.jsx)(n.code,{children:"refinement"})," syntax so the following code"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'YourRefinementType.from(value)\n  .map(YourNewtype(_))\n  .leftMap(err => s"Failed to create YourNewtype: $err")\n  .toEitherNec\n'})}),"\n",(0,i.jsx)(n.p,{children:"becomes just"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"validateAs[YourNewtype](value)\n"})}),"\n",(0,i.jsx)(n.p,{children:"or"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"value.validateAs[YourNewtype]\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["The idea of ",(0,i.jsx)(n.code,{children:"validateAs[A](value)"})," and ",(0,i.jsx)(n.code,{children:"value.validateAs[A]"})," is from ",(0,i.jsx)(n.a,{href:"https://leanpub.com/pfp-scala",children:"Practical FP in Scala"}),".\nThe syntax is not exactly the same, but the most important core logic of using ",(0,i.jsx)(n.code,{children:"Coercible"})," is the same."]}),(0,i.jsx)(n.p,{children:"If you are interested in the difference,"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.a,{href:"https://github.com/gvolpe/pfps-examples/blob/e49adf61fe5cdc84b0ca50995f20fb5a79f91cea/src/main/scala/examples/validation/RuntimeValidation.scala#L268-L294",children:["the source code from ",(0,i.jsx)(n.code,{children:"Practical FP in Scala"})," is here"]})," and"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.a,{href:"https://github.com/kevin-lee/extras/blob/3aaf342368665ba622f41874639e37b4f130a046/modules/extras-refinement/shared/src/main/scala/extras/refinement/syntax/refinement.scala#L11-L42",children:["the source code of ",(0,i.jsx)(n.code,{children:"extras-refinement"})," is here"]})}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"example-valid-case",children:"Example: Valid Case"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\nprintln(id2)\n// Right(999)\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\nprintln(name2)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Right(\n//   value = Person(id = 999, name = Kevin)\n// )\nprintln(person)\n// Right(Person(999,Kevin))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-invalid-case",children:"Example: Invalid Case"}),"\n",(0,i.jsx)(n.h4,{id:"only-of-them-is-invalid",children:"Only of them is invalid"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 0\n// idValue: Int = 0\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue = "Kevin"\n// nameValue: String = "Kevin"\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Right(value = Kevin)\nprintln(name)\n// Right(Kevin)\nprintln(name2)\n// Right(Kevin)\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n'})}),"\n",(0,i.jsx)(n.h4,{id:"the-other-one-is-invalid",children:"The other one is invalid"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 999\n// idValue: Int = 999\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Right(value = 999)\nprintln(id)\n// Right(999)\nprintln(id2)\n// Right(999)\n\nval nameValue = ""\n// nameValue: String = ""\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n'})}),"\n",(0,i.jsx)(n.h4,{id:"more-than-one-invalid",children:"More than one invalid"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.syntax.all._\nimport eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\nimport extras.refinement.syntax.refinement._\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Id(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n  final case class Person(id: Id, name: Name)\n}\nimport Types._\n\nval idValue = 0\n// idValue: Int = 0\n\nval id  = validateAs[Id](idValue)\n// id: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nval id2 = idValue.validateAs[Id]\n// id2: cats.data.package.EitherNec[String, Id] = Left(\n//   value = Singleton(a = "Failed to create Types.Id: Predicate failed: (0 > 0).")\n// )\nprintln(id)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\nprintln(id2)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0).))\n\nval nameValue = ""\n// nameValue: String = ""\n\nval name  = validateAs[Name](nameValue)\n// name: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nval name2 = nameValue.validateAs[Name]\n// name2: cats.data.package.EitherNec[String, Name] = Left(\n//   value = Singleton(\n//     a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//   )\n// )\nprintln(name)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\nprintln(name2)\n// Left(Chain(Failed to create Types.Name: Predicate isEmpty() did not fail.))\n\nval person = (id, name).parMapN(Person.apply)\n// person: cats.data.package.EitherNec[String, Person] = Left(\n//   value = Append(\n//     leftNE = Singleton(\n//       a = "Failed to create Types.Id: Predicate failed: (0 > 0)."\n//     ),\n//     rightNE = Singleton(\n//       a = "Failed to create Types.Name: Predicate isEmpty() did not fail."\n//     )\n//   )\n// )\nprintln(person)\n// Left(Chain(Failed to create Types.Id: Predicate failed: (0 > 0)., Failed to create Types.Name: Predicate isEmpty() did not fail.))\n'})}),"\n",(0,i.jsx)(n.h2,{id:"tovalue",children:(0,i.jsx)(n.code,{children:"toValue"})}),"\n",(0,i.jsxs)(n.p,{children:["If you want to get the underlying value of a refined newtype,\nyou can do it easily with ",(0,i.jsx)(n.code,{children:"extras.refinement.syntax.refinement"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'val name = Name(NonEmptyString("Kevin"))\nname.value\n// NonEmptyString = Kevin\n\nname.value.value\n// String = "Kevin"\n\nimport eu.timepit.refined.auto._\nname.toValue\n// String = "Kevin" \n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import eu.timepit.refined.api._\nimport eu.timepit.refined.numeric._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport io.estatico.newtype.macros.newtype\n\nobject Types {\n  type PositiveInt = Int Refined Positive\n  object PositiveInt extends RefinedTypeOps[PositiveInt, Int]\n  @newtype case class Num(value: PositiveInt)\n  \n  @newtype case class Name(value: NonEmptyString)\n  \n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import Types._\n\ndef foo(n: Int): Int = n * 2\ndef hello(s: String): Unit = println(s"Hello $s")\n\nval n = 1\n// n: Int = 1\nval num = Num(PositiveInt.unsafeFrom(n))\n// num: Num = 1\n\nval nameString = "Kevin"\n// nameString: String = "Kevin"\nval name = Name(NonEmptyString.unsafeFrom(nameString))\n// name: Name = Kevin\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"foo(num.value)\n// error: type mismatch;\n//  found   : repl.MdocSession.MdocApp6.Types.PositiveInt\n//     (which expands to)  eu.timepit.refined.api.Refined[Int,eu.timepit.refined.numeric.Greater[shapeless._0]]\n//  required: Int\n// foo(num.value)\n//     ^^^^^^^^^\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"hello(name.value)\n// error: type mismatch;\n//  found   : eu.timepit.refined.types.string.NonEmptyString\n//      (which expands to)  eu.timepit.refined.api.Refined[String,eu.timepit.refined.boolean.Not[eu.timepit.refined.collection.Empty]]\n//  required: String\n// hello(name.value)\n//       ^^^^^^^^^^\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can solve with ",(0,i.jsx)(n.code,{children:"extras-refinement"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import extras.refinement.syntax.refinement._\n\nnum.value\n// res36: PositiveInt = 1\nnum.value.value\n// res37: Int = 1\nnum.toValue\n// res38: Int = 1\nfoo(num.toValue)\n// res39: Int = 2\n\nname.value\n// res40: NonEmptyString = Kevin\nname.value.value\n// res41: String = "Kevin"\nname.toValue\n// res42: String = "Kevin"\nhello(name.toValue)\n// Hello Kevin\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also use ",(0,i.jsx)(n.code,{children:"eu.timepit.refined.auto"})," like"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import eu.timepit.refined.auto._\n\nnum.value\n// res44: PositiveInt = 1\nfoo(num.value)\n// res45: Int = 2\n\nname.value\n// res46: NonEmptyString = Kevin\nhello(name.value)\n// Hello Kevin\n"})}),"\n",(0,i.jsxs)(n.p,{children:["However, ",(0,i.jsx)(n.code,{children:".value"})," with ",(0,i.jsx)(n.code,{children:"eu.timepit.refined.auto"})," does an ",(0,i.jsx)(n.code,{children:"implicit"})," conversion from the ",(0,i.jsx)(n.code,{children:"refined type"})," to the underlying type\nwhereas the syntax from ",(0,i.jsx)(n.code,{children:"extras-refinement"})," is an explicit way to get the underlying type value of the ",(0,i.jsx)(n.code,{children:"refined newtype"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);