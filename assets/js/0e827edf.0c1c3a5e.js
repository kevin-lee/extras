"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4746],{8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var i=o(6540);const s={},c=i.createContext(s);function t(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(c.Provider,{value:n},e.children)}},8560:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"extras-circe/codecs-encoder","title":"Encoder","description":"Module","source":"@site/../generated-docs/docs/extras-circe/codecs-encoder.md","sourceDirName":"extras-circe","slug":"/extras-circe/codecs-encoder","permalink":"/docs/extras-circe/codecs-encoder","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"id":"codecs-encoder","title":"Encoder"},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/extras-circe/"},"next":{"title":"Codec","permalink":"/docs/extras-circe/codecs-codec"}}');var s=o(4848),c=o(8453);const t={sidebar_position:2,id:"codecs-encoder",title:"Encoder"},a=void 0,r={},d=[{value:"Module",id:"module",level:2},{value:"Encoder[A].withFields",id:"encoderawithfields",level:2},{value:"Example",id:"example",level:3},{value:"Comparison",id:"comparison",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-circe" % "0.49.0"\n'})}),"\n",(0,s.jsxs)(n.p,{children:["or for ",(0,s.jsx)(n.code,{children:"Scala.js"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %%% "extras-circe" % "0.49.0"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"encoderawithfields",children:"Encoder[A].withFields"}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"withFields"}),", you can add additional fields to the JSON encoded by an existing ",(0,s.jsx)(n.code,{children:"Encoder"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import extras.circe.codecs.encoder._\n\nEncoder[A].withFields { a =>\n    List(\n      "name1" -> a.someValue1.asJson,\n      "name2" -> a.someValue2.asJson\n    )\n  }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int) {\n  def name: String = "Foo"\n}\n\nobject Something {\n  implicit val somethingEncoder: Encoder[Something] = deriveEncoder[Something]\n    .withFields { a =>\n      List(\n        "doubled-n" -> (a.n * 2).asJson,\n        "name" -> a.name.asJson,\n        "some-fixed-value" -> "blah blah".asJson,\n      )\n    }\n}\n\nval something = Something(123)\n// something: Something = Something(n = 123)\nsomething.asJson\n// res1: Json = JObject(\n//   value = object[n -> 123,doubled-n -> 246,name -> "Foo",some-fixed-value -> "blah blah"]\n// )\nsomething.asJson.spaces2\n// res2: String = """{\n//   "n" : 123,\n//   "doubled-n" : 246,\n//   "name" : "Foo",\n//   "some-fixed-value" : "blah blah"\n// }"""\n'})}),"\n",(0,s.jsx)(n.h3,{id:"comparison",children:"Comparison"}),"\n",(0,s.jsxs)(n.p,{children:["Let's compare it with the ",(0,s.jsx)(n.code,{children:"Encoder"})," without ",(0,s.jsx)(n.code,{children:"withFields"})," syntax."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scala",children:'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int) {\n  def name: String = "Foo"\n}\n\nobject Something {\n  val originalSomethingEncoder: Encoder[Something] = deriveEncoder\n  implicit val somethingEncoder: Encoder[Something] = originalSomethingEncoder\n    .withFields { a =>\n      List(\n        "doubled-n" -> (a.n * 2).asJson,\n        "name" -> a.name.asJson,\n        "some-fixed-value" -> "blah blah".asJson,\n      )\n    }\n}\n\nval something = Something(123)\n// something: Something = Something(n = 123)\n\nSomething.originalSomethingEncoder(something)\n// res4: Json = JObject(value = object[n -> 123])\nSomething.originalSomethingEncoder(something).spaces2\n// res5: String = """{\n//   "n" : 123\n// }"""\n\nsomething.asJson\n// res6: Json = JObject(\n//   value = object[n -> 123,doubled-n -> 246,name -> "Foo",some-fixed-value -> "blah blah"]\n// )\nsomething.asJson.spaces2\n// res7: String = """{\n//   "n" : 123,\n//   "doubled-n" : 246,\n//   "name" : "Foo",\n//   "some-fixed-value" : "blah blah"\n// }"""\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);