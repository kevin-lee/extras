"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2498],{3498:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"extras-hedgehog/extras-hedgehog-circe/round-trip-tester","title":"RoundTripTester","description":"Module","source":"@site/../generated-docs/docs/extras-hedgehog/extras-hedgehog-circe/round-trip-tester.md","sourceDirName":"extras-hedgehog/extras-hedgehog-circe","slug":"/extras-hedgehog/extras-hedgehog-circe/round-trip-tester","permalink":"/docs/extras-hedgehog/extras-hedgehog-circe/round-trip-tester","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"id":"round-trip-tester","title":"RoundTripTester"},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/extras-hedgehog/extras-hedgehog-circe/"},"next":{"title":"Getting Started","permalink":"/docs/extras-hedgehog/extras-hedgehog-ce3/"}}');var o=i(4848),r=i(8453);const d={sidebar_position:2,id:"round-trip-tester",title:"RoundTripTester"},s=void 0,c={},a=[{value:"Module",id:"module",level:2},{value:"Test JSON Encoder and Decoder",id:"test-json-encoder-and-decoder",level:2},{value:"Examples:",id:"examples",level:2}];function h(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"module",children:"Module"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %% "extras-hedgehog-circe" % "0.46.1" % Test\n'})}),"\n",(0,o.jsxs)(n.p,{children:["or for ",(0,o.jsx)(n.code,{children:"Scala.js"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'"io.kevinlee" %%% "extras-hedgehog-circe" % "0.46.1" % Test\n'})}),"\n",(0,o.jsx)(n.h2,{id:"test-json-encoder-and-decoder",children:"Test JSON Encoder and Decoder"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RoundTripTester"})," tests the available Circe JSON ",(0,o.jsx)(n.code,{children:"Encoder"})," and ",(0,o.jsx)(n.code,{children:"Decoder"})," by:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Encoding the given type ",(0,o.jsx)(n.code,{children:"A"})," into a JSON ",(0,o.jsx)(n.code,{children:"String"})," using ",(0,o.jsx)(n.code,{children:"Encoder[A]"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Decoding the JSON ",(0,o.jsx)(n.code,{children:"String"})," back into the original type ",(0,o.jsx)(n.code,{children:"A"})," using ",(0,o.jsx)(n.code,{children:"Decoder[A]"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"RoundTripTester(sometypeA).test()\n// hedgehog.Result\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import extras.hedgehog.circe.RoundTripTester\n\nimport cats._\nimport io.circe._\n\nimport hedgehog._\nimport hedgehog.runner._\n\nobject SomethingSpec extends Properties {\n  override def tests: List[Test] = List(\n    property("round-trip test Something JSON Codec", roundTripTest),\n    property("round-trip test Something JSON Codec - failure case", roundTripTestWithDecodeFailure),\n    property("round-trip test Something JSON Codec - failure case (indent 8)", roundTripTestWithDecodeFailureIndent8),\n  )\n  \n  def roundTripTest: Property =\n    for {\n      something <- genSomething.log("something")\n    } yield {\n      RoundTripTester(something).test()\n    }\n\n  def roundTripTestWithDecodeFailure: Property =\n    for {\n      something <- genSomething\n        .map(something => SomethingWithDecodeFailure(something.id, something.name))\n        .log("something")\n    } yield {\n      RoundTripTester(something).test()\n    }\n\n  def roundTripTestWithDecodeFailureIndent8: Property =\n    for {\n      something <- genSomething\n        .map(something => SomethingWithDecodeFailure(something.id, something.name))\n        .log("something")\n    } yield {\n      RoundTripTester(something)\n        .indent(8)\n        .test()\n    }\n\n  def genSomething: Gen[Something] =\n    for {\n      id <- Gen.int(Range.linear(1, 100))\n      name <- Gen.string(Gen.unicode, Range.linear(3, 20))\n    } yield Something(id, name)\n\n\n  final case class Something(id: Int, name: String)\n  object Something {\n    implicit val somethingShow: Show[Something] =\n      something => s"Something(id = ${something.id.toString}, name = ${something.name})"\n\n    implicit val somethingCodec: Codec[Something] = io.circe.generic.semiauto.deriveCodec\n  }\n\n\n  final case class SomethingWithDecodeFailure(id: Int, name: String)\n\n  object SomethingWithDecodeFailure {\n    implicit val somethingWithDecodeFailureShow: Show[SomethingWithDecodeFailure] =\n      somethingWithDecodeFailure =>\n        List(\n          s"id = ${somethingWithDecodeFailure.id.toString}",\n          s"name = ${somethingWithDecodeFailure.name}",\n        ).mkString(\n          "SomethingWithDecodeFailure(",\n          ", ",\n          ")",\n        )\n\n    implicit val somethingWithDecodeFailureEncoder: Encoder[SomethingWithDecodeFailure] =\n      io.circe.generic.semiauto.deriveEncoder\n\n    implicit val somethingWithDecodeFailureDecoder: Decoder[SomethingWithDecodeFailure] =\n      Decoder.instance(c =>\n        for {\n          id   <- c.downField("blah").as[Int]\n          name <- c.downField("name").as[String]\n        } yield SomethingWithDecodeFailure(id, name)\n      )\n  }\n\n}\n\n\n// This is only for this document so you don\'t need this.\nSomethingSpec.main(Array.empty)\n// Using random seed: 100833991189\n// \x1b[32m+\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec: OK, passed 100 tests\n// \x1b[31m-\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec - failure case: Falsified after 0 passed tests\n// > something: SomethingWithDecodeFailure(1,\ufffd\ufffd\ufffd)\n// > Round-trip test for SomethingSpec.SomethingWithDecodeFailure failed with error:\n// > Error: DecodingFailure at .blah: Missing required field\n// > ---\n// > Input: SomethingWithDecodeFailure(id = 1, name = \ufffd\ufffd\ufffd)\n// > ---\n// > JSON: {\n//   "id" : 1,\n//   "name" : "\\u0000\\u0000\\u0000"\n// }\n// >\n// \x1b[31m-\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec - failure case (indent 8): Falsified after 0 passed tests\n// > something: SomethingWithDecodeFailure(1,\ufffd\ufffd\ufffd)\n// > Round-trip test for SomethingSpec.SomethingWithDecodeFailure failed with error:\n// > Error: DecodingFailure at .blah: Missing required field\n// > ---\n// > Input: SomethingWithDecodeFailure(id = 1, name = \ufffd\ufffd\ufffd)\n// > ---\n// > JSON: {\n//         "id" : 1,\n//         "name" : "\\u0000\\u0000\\u0000"\n// }\n// >\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>s});var t=i(6540);const o={},r=t.createContext(o);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);