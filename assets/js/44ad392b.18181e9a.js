"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6174],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),y=p(n),d=r,f=y["".concat(l,".").concat(d)]||y[d]||m[d]||s;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:1,sidebar_label:"Types",id:"scala3",title:"extras-type-info - Scala 3"},o=void 0,i={unversionedId:"extras-type-info/scala3/scala3",id:"extras-type-info/scala3/scala3",title:"extras-type-info - Scala 3",description:"types",source:"@site/../generated-docs/docs/extras-type-info/scala3/types.md",sourceDirName:"extras-type-info/scala3",slug:"/extras-type-info/scala3/scala3",permalink:"/docs/extras-type-info/scala3/scala3",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Types",id:"scala3",title:"extras-type-info - Scala 3"},sidebar:"tutorialSidebar",previous:{title:"Scala 3",permalink:"/docs/category/scala-3"},next:{title:"Getting Started",permalink:"/docs/extras-concurrent/"}},l={},p=[{value:"types",id:"types",level:2},{value:"<code>nestedTypeName</code>",id:"nestedtypename",level:3}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"types"},"types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.typeinfo.syntax.types.*\n")),(0,r.kt)("h3",{id:"nestedtypename"},(0,r.kt)("inlineCode",{parentName:"h3"},"nestedTypeName")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types.*\n\nsealed trait Foo\nobject Foo {\n  case object Bar extends Foo\n  final case class Baz(n: Int) extends Foo\n  \n  def bar: Foo = Bar\n  def baz(n: Int): Foo = Baz(n)\n}\n\nFoo.Bar.nestedTypeName\n// res1: String = "Foo.Bar"\nFoo.Baz(1).nestedTypeName\n// res2: String = "Foo.Baz"\n\nFoo.bar.nestedTypeName\n// res3: String = "Foo.Bar"\nFoo.baz(1).nestedTypeName\n// res4: String = "Foo.Baz"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types.*\n\nenum Foo {\n  case Bar\n  case Baz(n: Int)\n}\n\nFoo.Bar.nestedTypeName\n// res6: String = "Foo.Bar"\nFoo.Baz(1).nestedTypeName\n// res7: String = "Foo.Baz"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types.*\n\nobject data {\n  final case class Person(firstName: Person.FirstName, lastName: Person.LastName)\n\n  object Person {\n    type FirstName = FirstName.FirstName\n\n    object FirstName {\n      opaque\n      type FirstName = String\n\n      def apply(firstName: String): FirstName = firstName\n\n      given firstNameCanEqual: CanEqual[FirstName, FirstName]\n      = CanEqual.derived\n\n      extension(firstName: FirstName) {\n        def value: String = firstName\n      }\n    }\n\n    type LastName = LastName.LastName\n\n    object LastName {\n      opaque\n      type LastName = String\n\n      def apply(lastName: String): LastName = lastName\n\n      given lastNameCanEqual: CanEqual[LastName, LastName]\n      = CanEqual.derived\n\n      extension(lastName: LastName) {\n        def value: String = lastName\n      }\n    }\n\n  }\n}\n\nimport data.*\n\nval firstName = Person.FirstName("Kevin")\n// firstName: FirstName = "Kevin"\nval lastName = Person.LastName("Lee")\n// lastName: LastName = "Lee"\n\nfirstName.nestedTypeName\n// res9: String = "Person.FirstName"\nlastName.nestedTypeName\n// res10: String = "Person.LastName"\nPerson(firstName, lastName).nestedTypeName\n// res11: String = "data.Person"\n')))}m.isMDXComponent=!0}}]);