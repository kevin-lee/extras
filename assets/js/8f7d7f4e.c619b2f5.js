"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5135],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,m=d(e,["components","mdxType","originalType","parentName"]),p=c(t),h=r,u=p["".concat(s,".").concat(h)]||p[h]||l[h]||o;return t?i.createElement(u,a(a({ref:n},m),{},{components:t})):i.createElement(u,a({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=p;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d.mdxType="string"==typeof e?e:r,a[1]=d;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const o={sidebar_position:2,id:"round-trip-tester",title:"RoundTripTester"},a=void 0,d={unversionedId:"extras-hedgehog-circe/round-trip-tester",id:"extras-hedgehog-circe/round-trip-tester",title:"RoundTripTester",description:"",source:"@site/../generated-docs/docs/extras-hedgehog-circe/round-trip-tester.md",sourceDirName:"extras-hedgehog-circe",slug:"/extras-hedgehog-circe/round-trip-tester",permalink:"/docs/extras-hedgehog-circe/round-trip-tester",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"round-trip-tester",title:"RoundTripTester"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/extras-hedgehog-circe/"},next:{title:"Getting Started",permalink:"/docs/extras-scala-io/"}},s={},c=[],m={toc:c};function l(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.hedgehog.circe.RoundTripTester\n\nimport cats._\nimport io.circe._\n\nimport hedgehog._\nimport hedgehog.runner._\n\nobject SomethingSpec extends Properties {\n  override def tests: List[Test] = List(\n    property("round-trip test Something JSON Codec", roundTripTest),\n    property("round-trip test Something JSON Codec - failure case", roundTripTestWithDecodeFailure),\n    property("round-trip test Something JSON Codec - failure case (indent 4)", roundTripTestWithDecodeFailureIndent4),\n  )\n  \n  def roundTripTest: Property =\n    for {\n      something <- genSomething.log("something")\n    } yield {\n      RoundTripTester(something).test()\n    }\n\n  def roundTripTestWithDecodeFailure: Property =\n    for {\n      something <- genSomething\n        .map(something => SomethingWithDecodeFailure(something.id, something.name))\n        .log("something")\n    } yield {\n      RoundTripTester(something).test()\n    }\n\n  def roundTripTestWithDecodeFailureIndent4: Property =\n    for {\n      something <- genSomething\n        .map(something => SomethingWithDecodeFailure(something.id, something.name))\n        .log("something")\n    } yield {\n      RoundTripTester(something)\n        .indent(8)\n        .test()\n    }\n\n  def genSomething: Gen[Something] =\n    for {\n      id <- Gen.int(Range.linear(1, 100))\n      name <- Gen.string(Gen.unicode, Range.linear(3, 20))\n    } yield Something(id, name)\n\n\n  final case class Something(id: Int, name: String)\n  object Something {\n    implicit val somethingShow: Show[Something] =\n      something => s"Something(id = ${something.id.toString}, name = ${something.name})"\n\n    implicit val somethingCodec: Codec[Something] = io.circe.generic.semiauto.deriveCodec\n  }\n\n\n  final case class SomethingWithDecodeFailure(id: Int, name: String)\n\n  object SomethingWithDecodeFailure {\n    implicit val somethingWithDecodeFailureShow: Show[SomethingWithDecodeFailure] =\n      somethingWithDecodeFailure =>\n        List(\n          s"id = ${somethingWithDecodeFailure.id.toString}",\n          s"name = ${somethingWithDecodeFailure.name}",\n        ).mkString(\n          "SomethingWithDecodeFailure(",\n          ", ",\n          ")",\n        )\n\n    implicit val somethingWithDecodeFailureEncoder: Encoder[SomethingWithDecodeFailure] =\n      io.circe.generic.semiauto.deriveEncoder\n\n    implicit val somethingWithDecodeFailureDecoder: Decoder[SomethingWithDecodeFailure] =\n      Decoder.instance(c =>\n        for {\n          id   <- c.downField("blah").as[Int]\n          name <- c.downField("name").as[String]\n        } yield SomethingWithDecodeFailure(id, name)\n      )\n  }\n\n}\n\n\n// This is only for this document so you don\'t need this.\nSomethingSpec.main(Array.empty)\n// Using random seed: 135914046526\n// \x1b[32m+\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec: OK, passed 100 tests\n// \x1b[31m-\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec - failure case: Falsified after 0 passed tests\n// > something: SomethingWithDecodeFailure(1,\0\0\0)\n// > Round-trip test for SomethingSpec.SomethingWithDecodeFailure failed with error:\n// > Error: DecodingFailure at .blah: Attempt to decode value on failed cursor\n// > ---\n// > Input: SomethingWithDecodeFailure(id = 1, name = \0\0\0)\n// > ---\n// > JSON: {\n//   "id" : 1,\n//   "name" : "\\u0000\\u0000\\u0000"\n// }\n// >\n// \x1b[31m-\x1b[0m repl.MdocSession$MdocApp0$SomethingSpec$.round-trip test Something JSON Codec - failure case (indent 4): Falsified after 0 passed tests\n// > something: SomethingWithDecodeFailure(1,\0\0\0)\n// > Round-trip test for SomethingSpec.SomethingWithDecodeFailure failed with error:\n// > Error: DecodingFailure at .blah: Attempt to decode value on failed cursor\n// > ---\n// > Input: SomethingWithDecodeFailure(id = 1, name = \0\0\0)\n// > ---\n// > JSON: {\n//         "id" : 1,\n//         "name" : "\\u0000\\u0000\\u0000"\n// }\n// >\n')))}l.isMDXComponent=!0}}]);