"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3088],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>f});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=s(r),u=a,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return r?t.createElement(f,i(i({ref:n},c),{},{components:r})):t.createElement(f,i({ref:n},c))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d[p]="string"==typeof e?e:a,i[1]=d;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2662:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var t=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1,id:"render",title:"Render"},i=void 0,d={unversionedId:"extras-render/render",id:"extras-render/render",title:"Render",description:"Render type-class",source:"@site/../generated-docs/docs/extras-render/render.md",sourceDirName:"extras-render",slug:"/extras-render/render",permalink:"/docs/extras-render/render",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"render",title:"Render"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/extras-render/"},next:{title:"Syntax",permalink:"/docs/extras-render/render-syntax"}},l={},s=[{value:"<code>Render</code> type-class",id:"render-type-class",level:2},{value:"Usage Example",id:"usage-example",level:3},{value:"<code>Render.render</code> constructor method",id:"renderrender-constructor-method",level:2},{value:"Usage Example",id:"usage-example-1",level:3},{value:"<code>Render</code> from Existing <code>Render</code>",id:"render-from-existing-render",level:2},{value:"Usage Example",id:"usage-example-2",level:3}],c={toc:s},p="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(p,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"render-type-class"},(0,a.kt)("inlineCode",{parentName:"h2"},"Render")," type-class"),(0,a.kt)("p",null,"It is to provider ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," functionality to render a given type ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"trait Render[A] {\n  def render(a: A): String\n}\n")),(0,a.kt)("h3",{id:"usage-example"},"Usage Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.render.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] = new Render[Foo] {\n    def render(foo: Foo): String =\n      s"ID=${foo.id.toString} / Name=${foo.name}"\n  }\n//  OR just\n//  implicit val fooRender: Render[Foo] =\n//    foo => s"ID=${foo.id.toString} / Name=${foo.name}"\n}\n\ndef bar[A: Render](a: A): Unit =\n  println(s">> a: ${Render[A].render(a)}")\n\n\nbar(Foo(1, "Something"))\n// >> a: ID=1 / Name=Something\n')),(0,a.kt)("h2",{id:"renderrender-constructor-method"},(0,a.kt)("inlineCode",{parentName:"h2"},"Render.render")," constructor method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"Render.render[A](A => String): Render[A]\n")),(0,a.kt)("h3",{id:"usage-example-1"},"Usage Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.render.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] = Render.render(\n    foo => s"ID=${foo.id.toString} / Name=${foo.name}"\n  )\n}\n\ndef bar[A: Render](a: A): Unit =\n  println(s">> a: ${Render[A].render(a)}")\n\n\nbar(Foo(1, "Something"))\n// >> a: ID=1 / Name=Something\n')),(0,a.kt)("h2",{id:"render-from-existing-render"},(0,a.kt)("inlineCode",{parentName:"h2"},"Render")," from Existing ",(0,a.kt)("inlineCode",{parentName:"h2"},"Render")),(0,a.kt)("p",null,"If the value of your type can be rendered by an existing ",(0,a.kt)("inlineCode",{parentName:"p"},"Render"),", you can easily create ",(0,a.kt)("inlineCode",{parentName:"p"},"Render")," for your type from the existing one with ",(0,a.kt)("inlineCode",{parentName:"p"},"contramap"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"Render[A].contramap[B](A => B): Render[B]\n")),(0,a.kt)("h3",{id:"usage-example-2"},"Usage Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import java.util.UUID\nimport extras.render.Render\n\nfinal case class Id(value: UUID) extends AnyVal\nobject Id {\n  implicit val idRender: Render[Id] = Render[UUID].contramap(_.value)\n}\n\nimport extras.render.syntax._\nId(UUID.randomUUID()).render\n// res5: String = "c4340806-82e4-41fd-a372-284e24e8c165"\n\nfinal case class Name(value: String) extends AnyVal\nobject Name {\n  implicit val nameRender: Render[Name] = Render[String].contramap(_.value)\n}\n\nName("Kevin").render\n// res6: String = "Kevin"\n')))}m.isMDXComponent=!0}}]);