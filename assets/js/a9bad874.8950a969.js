"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3460],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(t),c=s,y=u["".concat(p,".").concat(c)]||u[c]||d[c]||r;return t?a.createElement(y,o(o({ref:n},m),{},{components:t})):a.createElement(y,o({ref:n},m))}));function c(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,o=new Array(r);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9346:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=t(7462),s=(t(7294),t(3905));const r={sidebar_position:1,sidebar_label:"Types",id:"types",title:"extras-type-info - Scala 2"},o=void 0,i={unversionedId:"extras-type-info/scala2/types",id:"extras-type-info/scala2/types",title:"extras-type-info - Scala 2",description:"types",source:"@site/../generated-docs/docs/extras-type-info/scala2/types.md",sourceDirName:"extras-type-info/scala2",slug:"/extras-type-info/scala2/types",permalink:"/docs/extras-type-info/scala2/types",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Types",id:"types",title:"extras-type-info - Scala 2"},sidebar:"tutorialSidebar",previous:{title:"Scala 2",permalink:"/docs/category/scala-2"},next:{title:"Scala 3",permalink:"/docs/category/scala-3"}},p={},l=[{value:"types",id:"types",level:2},{value:"<code>nestedTypeName</code>",id:"nestedtypename",level:3},{value:"More about type-info",id:"more-about-type-info",level:2},{value:"syntax for <code>WeakTypeTag</code>",id:"syntax-for-weaktypetag",level:2},{value:"<code>value.nestedTypeName</code>",id:"valuenestedtypename",level:3},{value:"<code>WeakTypeTag[A].nestedTypeName</code>",id:"weaktypetaganestedtypename",level:3},{value:"Works for <code>@newtype</code>",id:"works-for-newtype",level:3},{value:"syntax for <code>ClassTag</code>",id:"syntax-for-classtag",level:2},{value:"<code>value.nestedRuntimeClassName</code>",id:"valuenestedruntimeclassname",level:3},{value:"<code>ClassTag[A].nestedRuntimeClassName</code>",id:"classtaganestedruntimeclassname",level:3},{value:"Do not use for <code>@newtype</code>",id:"do-not-use-for-newtype",level:3}],m={toc:l};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"types"},"types"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import extras.typeinfo.syntax.types._\n")),(0,s.kt)("h3",{id:"nestedtypename"},(0,s.kt)("inlineCode",{parentName:"h3"},"nestedTypeName")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types._\n\nsealed trait Foo\nobject Foo {\n  case object Bar extends Foo\n  final case class Baz(n: Int) extends Foo\n  \n  def bar: Foo = Bar\n  def baz(n: Int): Foo = Baz(n)\n}\n\nFoo.Bar.nestedTypeName\n// res1: String = "Foo.Bar"\nFoo.Baz(1).nestedTypeName\n// res2: String = "Foo.Baz"\n\nFoo.bar.nestedTypeName\n// res3: String = "MdocApp0.Foo"\nFoo.baz(1).nestedTypeName\n// res4: String = "MdocApp0.Foo"\n\nFoo.Bar.nestedRuntimeClassName\n// res5: String = "Foo.Bar"\nFoo.Baz(1).nestedRuntimeClassName\n// res6: String = "Foo.Baz"\n\nFoo.bar.nestedRuntimeClassName\n// res7: String = "Foo.Bar"\nFoo.baz(1).nestedRuntimeClassName\n// res8: String = "Foo.Baz"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import io.estatico.newtype.macros.newtype\nimport eu.timepit.refined.auto._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport extras.typeinfo.syntax.types._\n\nobject data {\n  final case class Person(firstName: Person.FirstName, lastName: Person.LastName)\n\n  object Person {\n    \n    @newtype case class FirstName(value: NonEmptyString)\n    @newtype case class LastName(value: NonEmptyString)\n\n  }\n}\n\nimport data._\n\nval firstName = Person.FirstName(NonEmptyString("Kevin"))\n// firstName: Person.FirstName = Kevin\nval lastName = Person.LastName(NonEmptyString("Lee"))\n// lastName: Person.LastName = Lee\nval person = Person(firstName, lastName)\n// person: Person = Person(firstName = Kevin, lastName = Lee)\n\nfirstName.nestedTypeName\n// res10: String = "Person.FirstName"\nlastName.nestedTypeName\n// res11: String = "Person.LastName"\nperson.nestedTypeName\n// res12: String = "data.Person"\n\nfirstName.nestedRuntimeClassName\n// res13: String = "api.Refined"\nlastName.nestedRuntimeClassName\n// res14: String = "api.Refined"\nperson.nestedRuntimeClassName\n// res15: String = "data.Person"\n')),(0,s.kt)("h2",{id:"more-about-type-info"},"More about type-info"),(0,s.kt)("h2",{id:"syntax-for-weaktypetag"},"syntax for ",(0,s.kt)("inlineCode",{parentName:"h2"},"WeakTypeTag")),(0,s.kt)("h3",{id:"valuenestedtypename"},(0,s.kt)("inlineCode",{parentName:"h3"},"value.nestedTypeName")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n\ndef infoWithWeakTypeTag[A: WeakTypeTag](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${weakTypeTag[A].nestedTypeName}\n       |""".stripMargin)\n\ninfoWithWeakTypeTag(Status.inProgress(Instant.now()))\n// value: InProgress(2023-02-13T13:00:49.664985Z)\n//  type: MdocApp16.Status\n// \ninfoWithWeakTypeTag(Status.InProgress(Instant.now()))\n// value: InProgress(2023-02-13T13:00:49.666119Z)\n//  type: Status.InProgress\n// \n\ninfoWithWeakTypeTag(Status.done)\n// value: Done\n//  type: MdocApp16.Status\n// \ninfoWithWeakTypeTag(Status.Done)\n// value: Done\n//  type: Status.Done\n//\n')),(0,s.kt)("h3",{id:"weaktypetaganestedtypename"},(0,s.kt)("inlineCode",{parentName:"h3"},"WeakTypeTag[A].nestedTypeName")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n\ndef infoWithWeakTypeTag[A](implicit weakTypeTag: WeakTypeTag[A]): Unit =\n  println(\n    s"""type: ${weakTypeTag.nestedTypeName}\n       |""".stripMargin)\n\ninfoWithWeakTypeTag[Status.InProgress]\n// type: Status.InProgress\n// \ninfoWithWeakTypeTag[Status.Done.type]\n// type: Status.Done\n// \n\nprintln(weakTypeTag[Status.InProgress].nestedTypeName)\n// Status.InProgress\nprintln(weakTypeTag[Status.Done.type].nestedTypeName)\n// Status.Done\n')),(0,s.kt)("h3",{id:"works-for-newtype"},"Works for ",(0,s.kt)("inlineCode",{parentName:"h3"},"@newtype")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"It works for ",(0,s.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"newtype")," as well."),(0,s.kt)("p",{parentName:"admonition"},"If you use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/estatico/scala-newtype"},"newtype")," and want to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"newtype")," name, ",(0,s.kt)("inlineCode",{parentName:"p"},"WeakTypeTag")," syntax is what you should use since you can get the name of ",(0,s.kt)("inlineCode",{parentName:"p"},"newtype")," with it.")),(0,s.kt)("p",null,"An example showing that it works with ",(0,s.kt)("inlineCode",{parentName:"p"},"@newtype"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import io.estatico.newtype.macros.newtype\n\nobject Types {\n  @newtype case class Id(value: Long)\n  @newtype case class Username(value: String)\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'def infoWithClassTag[A](a: A)(implicit weakTypeTag: WeakTypeTag[A]): Unit =\n  println(\n    s"""value: $a\n       | type: ${weakTypeTag.nestedTypeName}\n       |""".stripMargin)\n\nimport Types._\n\ninfoWithClassTag(Id(1L))\n// value: 1\n//  type: Types.Id\n// \ninfoWithClassTag(Username("someuser"))\n// value: someuser\n//  type: Types.Username\n// \n\nprintln(weakTypeTag[Id].nestedTypeName)\n// Types.Id\nprintln(weakTypeTag[Username].nestedTypeName)\n// Types.Username\n')),(0,s.kt)("h2",{id:"syntax-for-classtag"},"syntax for ",(0,s.kt)("inlineCode",{parentName:"h2"},"ClassTag")),(0,s.kt)("h3",{id:"valuenestedruntimeclassname"},(0,s.kt)("inlineCode",{parentName:"h3"},"value.nestedRuntimeClassName")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${a.nestedRuntimeClassName}\n       |""".stripMargin)\n\ninfoWithClassTag(Status.inProgress(Instant.now()))\n// value: InProgress(2023-02-13T13:00:49.678999Z)\n//  type: Status.InProgress\n// \ninfoWithClassTag(Status.InProgress(Instant.now()))\n// value: InProgress(2023-02-13T13:00:49.679760Z)\n//  type: Status.InProgress\n// \n\ninfoWithClassTag(Status.done)\n// value: Done\n//  type: Status.Done\n// \ninfoWithClassTag(Status.Done)\n// value: Done\n//  type: Status.Done\n//\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"println(Status.inProgress(Instant.now()).nestedRuntimeClassName)\n// Status.InProgress\nprintln(Status.InProgress(Instant.now()).nestedRuntimeClassName)\n// Status.InProgress\n\nprintln(Status.done.nestedRuntimeClassName)\n// Status.Done\nprintln(Status.Done.nestedRuntimeClassName)\n// Status.Done\n")),(0,s.kt)("h3",{id:"classtaganestedruntimeclassname"},(0,s.kt)("inlineCode",{parentName:"h3"},"ClassTag[A].nestedRuntimeClassName")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import scala.reflect.{classTag, ClassTag}\nimport extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](implicit classTag: ClassTag[A]): Unit =\n  println(\n    s"""type: ${classTag.nestedRuntimeClassName}\n       |""".stripMargin)\n\ninfoWithClassTag[Status.InProgress]\n// type: Status.InProgress\n// \ninfoWithClassTag[Status.Done.type]\n// type: Status.Done\n//\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"println(classTag[Status.InProgress].nestedRuntimeClassName)\n// Status.InProgress\nprintln(classTag[Status.Done.type].nestedRuntimeClassName)\n// Status.Done\n")),(0,s.kt)("h3",{id:"do-not-use-for-newtype"},"Do not use for ",(0,s.kt)("inlineCode",{parentName:"h3"},"@newtype")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"Do not use it for ",(0,s.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"newtype"),"."),(0,s.kt)("p",{parentName:"admonition"},"If you use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/estatico/scala-newtype"},"newtype")," and want to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"newtype")," name, ",(0,s.kt)("inlineCode",{parentName:"p"},"ClassTag")," syntax is not the one you should use since you can get only the actual type not ",(0,s.kt)("inlineCode",{parentName:"p"},"newtype"),". For ",(0,s.kt)("inlineCode",{parentName:"p"},"@newtype"),", please use '",(0,s.kt)("a",{parentName:"p",href:"#works-for-newtype"},(0,s.kt)("inlineCode",{parentName:"a"},"reflects")," syntax for ",(0,s.kt)("inlineCode",{parentName:"a"},"WeakTypeTag")),"'.")),(0,s.kt)("p",null,"An example showing that it does not work with ",(0,s.kt)("inlineCode",{parentName:"p"},"@newtype"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import io.estatico.newtype.macros.newtype\n\nobject Types {\n  @newtype case class Id(value: Long)\n  @newtype case class Username(value: String)\n}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${a.nestedRuntimeClassName}\n       |""".stripMargin)\n\nimport Types._\n\ninfoWithClassTag(Id(1L))\n// value: 1\n//  type: lang.Long\n// \ninfoWithClassTag(Username("someuser"))\n// value: someuser\n//  type: lang.String\n// \n\nprintln(Id(1L).nestedRuntimeClassName)\n// lang.Long\nprintln(Username("someuser").nestedRuntimeClassName)\n// lang.String\n')))}d.isMDXComponent=!0}}]);