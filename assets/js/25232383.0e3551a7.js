"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[938],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>u});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),d=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=d(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(r),u=a,g=m["".concat(s,".").concat(u)]||m[u]||p[u]||o;return r?t.createElement(g,i(i({ref:n},c),{},{components:r})):t.createElement(g,i({ref:n},c))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3242:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var t=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1,id:"render",title:"Render"},i=void 0,l={unversionedId:"extras-core/render",id:"extras-core/render",title:"Render",description:"Render type-class",source:"@site/../generated-docs/docs/extras-core/render.md",sourceDirName:"extras-core",slug:"/extras-core/render",permalink:"/docs/extras-core/render",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,id:"render",title:"Render"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/extras-core/"},next:{title:"Getting Started",permalink:"/docs/extras-cats/"}},s={},d=[{value:"<code>Render</code> type-class",id:"render-type-class",level:2},{value:"Usage Example",id:"usage-example",level:3},{value:"<code>Render</code> Syntax",id:"render-syntax",level:2},{value:"<code>A.render</code>",id:"arender",level:3},{value:"<code>List[A].renderString</code>",id:"listarenderstring",level:3}],c={toc:d};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"render-type-class"},(0,a.kt)("inlineCode",{parentName:"h2"},"Render")," type-class"),(0,a.kt)("p",null,"It is to provider ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," functionality to render a given type ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"trait Render[A] {\n  def render(a: A): String\n}\n")),(0,a.kt)("h3",{id:"usage-example"},"Usage Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.core.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"ID=${foo.id.toString} / Name=${foo.name}"\n}\n\ndef bar[A: Render](a: A): Unit =\n  println(s">> a: ${Render[A].render(a)}")\n\n\nbar(Foo(1, "Something"))\n// >> a: ID=1 / Name=Something\n')),(0,a.kt)("h2",{id:"render-syntax"},(0,a.kt)("inlineCode",{parentName:"h2"},"Render")," Syntax"),(0,a.kt)("p",null,"There is ",(0,a.kt)("inlineCode",{parentName:"p"},"Render")," syntax provided for convenience."),(0,a.kt)("h3",{id:"arender"},(0,a.kt)("inlineCode",{parentName:"h3"},"A.render")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"(a: A).render // when `Render[A]` is available\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.core.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"ID=${foo.id.toString} / Name=${foo.name}"\n}\n\nimport extras.core.syntax.render._\n// or\n// import extras.core.syntax.all._\n\ndef bar[A: Render](a: A): Unit =\n  println(s">> a: ${a.render}")\n\nFoo(1, "Something").render\n// res3: String = "ID=1 / Name=Something"\n\nbar(Foo(1, "Something"))\n// >> a: ID=1 / Name=Something\n')),(0,a.kt)("h3",{id:"listarenderstring"},(0,a.kt)("inlineCode",{parentName:"h3"},"List[A].renderString")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"List[A](a..).renderString // when Render[A] is available\nList[A](a..).renderString(delimiter) // when Render[A] is available\nList[A](a..).renderString(start, delimiter, end) // when Render[A] is available\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.core.Render\n\nfinal case class Foo(id: Int, name: String)\nobject Foo {\n  implicit val fooRender: Render[Foo] =\n    foo => s"{ID=${foo.id.toString},Name=${foo.name}}"\n}\n\nimport extras.core.syntax.render._\n// or\n// import extras.core.syntax.all._\n\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString\n// res6: String = "{ID=1,Name=A}{ID=2,Name=B}{ID=3,Name=C}"\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString(", ")\n// res7: String = "{ID=1,Name=A}, {ID=2,Name=B}, {ID=3,Name=C}"\nList(Foo(1, "A"), Foo(2, "B"), Foo(3, "C")).renderString("[", ", ", "]")\n// res8: String = "[{ID=1,Name=A}, {ID=2,Name=B}, {ID=3,Name=C}]"\n')))}p.isMDXComponent=!0}}]);