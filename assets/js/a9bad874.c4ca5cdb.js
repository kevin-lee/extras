"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2071],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(6540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},8908:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"extras-type-info/scala2/types","title":"extras-type-info - Scala 2","description":"types","source":"@site/../generated-docs/docs/extras-type-info/scala2/types.md","sourceDirName":"extras-type-info/scala2","slug":"/extras-type-info/scala2/types","permalink":"/docs/extras-type-info/scala2/types","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Types","id":"types","title":"extras-type-info - Scala 2"},"sidebar":"tutorialSidebar","previous":{"title":"Scala 2","permalink":"/docs/category/scala-2"},"next":{"title":"Getting Started","permalink":"/docs/extras-fs2/"}}');var a=s(4848),r=s(8453);const o={sidebar_position:1,sidebar_label:"Types",id:"types",title:"extras-type-info - Scala 2"},i=void 0,l={},d=[{value:"types",id:"types",level:2},{value:"<code>nestedTypeName</code>",id:"nestedtypename",level:3},{value:"More about type-info",id:"more-about-type-info",level:2},{value:"syntax for <code>WeakTypeTag</code>",id:"syntax-for-weaktypetag",level:2},{value:"<code>value.nestedTypeName</code>",id:"valuenestedtypename",level:3},{value:"<code>WeakTypeTag[A].nestedTypeName</code>",id:"weaktypetaganestedtypename",level:3},{value:"Works for <code>@newtype</code>",id:"works-for-newtype",level:3},{value:"syntax for <code>ClassTag</code>",id:"syntax-for-classtag",level:2},{value:"<code>value.nestedRuntimeClassName</code>",id:"valuenestedruntimeclassname",level:3},{value:"<code>ClassTag[A].nestedRuntimeClassName</code>",id:"classtaganestedruntimeclassname",level:3},{value:"Do not use for <code>@newtype</code>",id:"do-not-use-for-newtype",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"types",children:"types"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import extras.typeinfo.syntax.types._\n"})}),"\n",(0,a.jsx)(n.h3,{id:"nestedtypename",children:(0,a.jsx)(n.code,{children:"nestedTypeName"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import extras.typeinfo.syntax.types._\n\nsealed trait Foo\nobject Foo {\n  case object Bar extends Foo\n  final case class Baz(n: Int) extends Foo\n  \n  def bar: Foo = Bar\n  def baz(n: Int): Foo = Baz(n)\n}\n\nFoo.Bar.nestedTypeName\n// res1: String = "Foo.Bar"\nFoo.Baz(1).nestedTypeName\n// res2: String = "Foo.Baz"\n\nFoo.bar.nestedTypeName\n// res3: String = "MdocApp0.Foo"\nFoo.baz(1).nestedTypeName\n// res4: String = "MdocApp0.Foo"\n\nFoo.Bar.nestedRuntimeClassName\n// res5: String = "Foo.Bar"\nFoo.Baz(1).nestedRuntimeClassName\n// res6: String = "Foo.Baz"\n\nFoo.bar.nestedRuntimeClassName\n// res7: String = "Foo.Bar"\nFoo.baz(1).nestedRuntimeClassName\n// res8: String = "Foo.Baz"\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import io.estatico.newtype.macros.newtype\nimport eu.timepit.refined.auto._\nimport eu.timepit.refined.types.string.NonEmptyString\nimport extras.typeinfo.syntax.types._\n\nobject data {\n  final case class Person(firstName: Person.FirstName, lastName: Person.LastName)\n\n  object Person {\n    \n    @newtype case class FirstName(value: NonEmptyString)\n    @newtype case class LastName(value: NonEmptyString)\n\n  }\n}\n\nimport data._\n\nval firstName = Person.FirstName(NonEmptyString("Kevin"))\n// firstName: Person.FirstName = Kevin\nval lastName = Person.LastName(NonEmptyString("Lee"))\n// lastName: Person.LastName = Lee\nval person = Person(firstName, lastName)\n// person: Person = Person(firstName = Kevin, lastName = Lee)\n\nfirstName.nestedTypeName\n// res10: String = "Person.FirstName"\nlastName.nestedTypeName\n// res11: String = "Person.LastName"\nperson.nestedTypeName\n// res12: String = "data.Person"\n\nfirstName.nestedRuntimeClassName\n// res13: String = "api.Refined"\nlastName.nestedRuntimeClassName\n// res14: String = "api.Refined"\nperson.nestedRuntimeClassName\n// res15: String = "data.Person"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"more-about-type-info",children:"More about type-info"}),"\n",(0,a.jsxs)(n.h2,{id:"syntax-for-weaktypetag",children:["syntax for ",(0,a.jsx)(n.code,{children:"WeakTypeTag"})]}),"\n",(0,a.jsx)(n.h3,{id:"valuenestedtypename",children:(0,a.jsx)(n.code,{children:"value.nestedTypeName"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n\ndef infoWithWeakTypeTag[A: WeakTypeTag](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${weakTypeTag[A].nestedTypeName}\n       |""".stripMargin)\n\ninfoWithWeakTypeTag(Status.inProgress(Instant.now()))\n// value: InProgress(2025-07-30T13:14:30.588299Z)\n//  type: MdocApp16.Status\n// \ninfoWithWeakTypeTag(Status.InProgress(Instant.now()))\n// value: InProgress(2025-07-30T13:14:30.589235Z)\n//  type: Status.InProgress\n// \n\ninfoWithWeakTypeTag(Status.done)\n// value: Done\n//  type: MdocApp16.Status\n// \ninfoWithWeakTypeTag(Status.Done)\n// value: Done\n//  type: Status.Done\n//\n'})}),"\n",(0,a.jsx)(n.h3,{id:"weaktypetaganestedtypename",children:(0,a.jsx)(n.code,{children:"WeakTypeTag[A].nestedTypeName"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n\ndef infoWithWeakTypeTag[A](implicit weakTypeTag: WeakTypeTag[A]): Unit =\n  println(\n    s"""type: ${weakTypeTag.nestedTypeName}\n       |""".stripMargin)\n\ninfoWithWeakTypeTag[Status.InProgress]\n// type: Status.InProgress\n// \ninfoWithWeakTypeTag[Status.Done.type]\n// type: Status.Done\n// \n\nprintln(weakTypeTag[Status.InProgress].nestedTypeName)\n// Status.InProgress\nprintln(weakTypeTag[Status.Done.type].nestedTypeName)\n// Status.Done\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"works-for-newtype",children:["Works for ",(0,a.jsx)(n.code,{children:"@newtype"})]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["It works for ",(0,a.jsx)(n.code,{children:"newtype"})," as well."]}),(0,a.jsxs)(n.p,{children:["If you use ",(0,a.jsx)(n.a,{href:"https://github.com/estatico/scala-newtype",children:"newtype"})," and want to get the ",(0,a.jsx)(n.code,{children:"newtype"})," name, ",(0,a.jsx)(n.code,{children:"WeakTypeTag"})," syntax is what you should use since you can get the name of ",(0,a.jsx)(n.code,{children:"newtype"})," with it."]})]}),"\n",(0,a.jsxs)(n.p,{children:["An example showing that it works with ",(0,a.jsx)(n.code,{children:"@newtype"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import io.estatico.newtype.macros.newtype\n\nobject Types {\n  @newtype case class Id(value: Long)\n  @newtype case class Username(value: String)\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import scala.reflect.runtime.universe._\nimport extras.typeinfo.syntax.types._\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'def infoWithClassTag[A](a: A)(implicit weakTypeTag: WeakTypeTag[A]): Unit =\n  println(\n    s"""value: $a\n       | type: ${weakTypeTag.nestedTypeName}\n       |""".stripMargin)\n\nimport Types._\n\ninfoWithClassTag(Id(1L))\n// value: 1\n//  type: Types.Id\n// \ninfoWithClassTag(Username("someuser"))\n// value: someuser\n//  type: Types.Username\n// \n\nprintln(weakTypeTag[Id].nestedTypeName)\n// Types.Id\nprintln(weakTypeTag[Username].nestedTypeName)\n// Types.Username\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"syntax-for-classtag",children:["syntax for ",(0,a.jsx)(n.code,{children:"ClassTag"})]}),"\n",(0,a.jsx)(n.h3,{id:"valuenestedruntimeclassname",children:(0,a.jsx)(n.code,{children:"value.nestedRuntimeClassName"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${a.nestedRuntimeClassName}\n       |""".stripMargin)\n\ninfoWithClassTag(Status.inProgress(Instant.now()))\n// value: InProgress(2025-07-30T13:14:30.600142Z)\n//  type: Status.InProgress\n// \ninfoWithClassTag(Status.InProgress(Instant.now()))\n// value: InProgress(2025-07-30T13:14:30.600730Z)\n//  type: Status.InProgress\n// \n\ninfoWithClassTag(Status.done)\n// value: Done\n//  type: Status.Done\n// \ninfoWithClassTag(Status.Done)\n// value: Done\n//  type: Status.Done\n//\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"println(Status.inProgress(Instant.now()).nestedRuntimeClassName)\n// Status.InProgress\nprintln(Status.InProgress(Instant.now()).nestedRuntimeClassName)\n// Status.InProgress\n\nprintln(Status.done.nestedRuntimeClassName)\n// Status.Done\nprintln(Status.Done.nestedRuntimeClassName)\n// Status.Done\n"})}),"\n",(0,a.jsx)(n.h3,{id:"classtaganestedruntimeclassname",children:(0,a.jsx)(n.code,{children:"ClassTag[A].nestedRuntimeClassName"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import java.time._\n\nsealed trait Status\nobject Status {\n  final case class InProgress(startedAt: Instant) extends Status\n  case object Done extends Status\n  \n  def inProgress(startedAt: Instant): Status = InProgress(startedAt)\n  def done: Status = Done\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import scala.reflect.{classTag, ClassTag}\nimport extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](implicit classTag: ClassTag[A]): Unit =\n  println(\n    s"""type: ${classTag.nestedRuntimeClassName}\n       |""".stripMargin)\n\ninfoWithClassTag[Status.InProgress]\n// type: Status.InProgress\n// \ninfoWithClassTag[Status.Done.type]\n// type: Status.Done\n//\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"println(classTag[Status.InProgress].nestedRuntimeClassName)\n// Status.InProgress\nprintln(classTag[Status.Done.type].nestedRuntimeClassName)\n// Status.Done\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"do-not-use-for-newtype",children:["Do not use for ",(0,a.jsx)(n.code,{children:"@newtype"})]}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["Do not use it for ",(0,a.jsx)(n.code,{children:"newtype"}),"."]}),(0,a.jsxs)(n.p,{children:["If you use ",(0,a.jsx)(n.a,{href:"https://github.com/estatico/scala-newtype",children:"newtype"})," and want to get the ",(0,a.jsx)(n.code,{children:"newtype"})," name, ",(0,a.jsx)(n.code,{children:"ClassTag"})," syntax is not the one you should use since you can get only the actual type not ",(0,a.jsx)(n.code,{children:"newtype"}),". For ",(0,a.jsx)(n.code,{children:"@newtype"}),", please use '",(0,a.jsxs)(n.a,{href:"#works-for-newtype",children:[(0,a.jsx)(n.code,{children:"reflects"})," syntax for ",(0,a.jsx)(n.code,{children:"WeakTypeTag"})]}),"'."]})]}),"\n",(0,a.jsxs)(n.p,{children:["An example showing that it does not work with ",(0,a.jsx)(n.code,{children:"@newtype"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:"import io.estatico.newtype.macros.newtype\n\nobject Types {\n  @newtype case class Id(value: Long)\n  @newtype case class Username(value: String)\n}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",children:'import extras.typeinfo.syntax.types._\n\ndef infoWithClassTag[A](a: A): Unit =\n  println(\n    s"""value: $a\n       | type: ${a.nestedRuntimeClassName}\n       |""".stripMargin)\n\nimport Types._\n\ninfoWithClassTag(Id(1L))\n// value: 1\n//  type: lang.Long\n// \ninfoWithClassTag(Username("someuser"))\n// value: someuser\n//  type: lang.String\n// \n\nprintln(Id(1L).nestedRuntimeClassName)\n// lang.Long\nprintln(Username("someuser").nestedRuntimeClassName)\n// lang.String\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);