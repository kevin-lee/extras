"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1149],{3905:(e,n,i)=>{i.d(n,{Zo:()=>l,kt:()=>h});var r=i(7294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,r,t=function(e,n){if(null==e)return{};var i,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var m=r.createContext({}),s=function(e){var n=r.useContext(m),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},l=function(e){var n=s(e.components);return r.createElement(m.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var i=e.components,t=e.mdxType,o=e.originalType,m=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(i),g=t,h=d["".concat(m,".").concat(g)]||d[g]||p[g]||o;return i?r.createElement(h,a(a({ref:n},l),{},{components:i})):r.createElement(h,a({ref:n},l))}));function h(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=i.length,a=new Array(o);a[0]=g;var c={};for(var m in n)hasOwnProperty.call(n,m)&&(c[m]=n[m]);c.originalType=e,c[d]="string"==typeof e?e:t,a[1]=c;for(var s=2;s<o;s++)a[s]=i[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,i)}g.displayName="MDXCreateElement"},9889:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=i(7462),t=(i(7294),i(3905));const o={sidebar_position:3,id:"codecs-codec",title:"Codec"},a=void 0,c={unversionedId:"extras-circe/codecs-codec",id:"extras-circe/codecs-codec",title:"Codec",description:"There are extension methods for Encoder, Decoder and Codec.",source:"@site/../generated-docs/docs/extras-circe/codecs-codec.md",sourceDirName:"extras-circe",slug:"/extras-circe/codecs-codec",permalink:"/docs/extras-circe/codecs-codec",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"codecs-codec",title:"Codec"},sidebar:"tutorialSidebar",previous:{title:"Encoder",permalink:"/docs/extras-circe/codecs-encoder"},next:{title:"Getting Started",permalink:"/docs/extras-hedgehog/"}},m={},s=[{value:"EncoderA.renameFields",id:"encoderarenamefields",level:2},{value:"Example",id:"example",level:3},{value:"Comparison",id:"comparison",level:3},{value:"DecoderA.renameFields",id:"decoderarenamefields",level:2},{value:"Example",id:"example-1",level:3},{value:"Comparison",id:"comparison-1",level:3},{value:"CodecA.renameFields (Encoder +  Decoder)",id:"codecarenamefields-encoder---decoder",level:2},{value:"Example",id:"example-2",level:3},{value:"Comparison",id:"comparison-2",level:3}],l={toc:s},d="wrapper";function p(e){let{components:n,...i}=e;return(0,t.kt)(d,(0,r.Z)({},l,i,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"There are extension methods for ",(0,t.kt)("inlineCode",{parentName:"p"},"Encoder"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"Decoder")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"Codec"),"."),(0,t.kt)("h2",{id:"encoderarenamefields"},"Encoder","[A]",".renameFields"),(0,t.kt)("p",null,"With ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields"),", you can make the existing JSON ",(0,t.kt)("inlineCode",{parentName:"p"},"Encoder")," to rename the existing fields."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.circe.codecs.encoder._\n\nEncoder[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Encoder[A]\n')),(0,t.kt)("h3",{id:"example"},"Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingEncoder: Encoder[Something] =\n    deriveEncoder[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\nsomething.asJson\n// res1: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nsomething.asJson.spaces2\n// res2: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n')),(0,t.kt)("h3",{id:"comparison"},"Comparison"),(0,t.kt)("p",null,"Let's compare it with the ",(0,t.kt)("inlineCode",{parentName:"p"},"Encoder")," without ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields")," syntax."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.encoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingEncoder: Encoder[Something] = deriveEncoder\n  implicit val somethingEncoder: Encoder[Something] = originalSomethingEncoder\n    .renameFields(\n      "n" -> "id",\n      "s" -> "name"\n    )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\n\nSomething.originalSomethingEncoder(something)\n// res4: Json = JObject(\n//   value = object[n -> 1,s -> "Vibranium Shield",price -> 999999999]\n// )\nSomething.originalSomethingEncoder(something).spaces2\n// res5: String = """{\n//   "n" : 1,\n//   "s" : "Vibranium Shield",\n//   "price" : 999999999\n// }"""\n\nsomething.asJson\n// res6: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nsomething.asJson.spaces2\n// res7: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n')),(0,t.kt)("h2",{id:"decoderarenamefields"},"Decoder","[A]",".renameFields"),(0,t.kt)("p",null,"With ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields"),", you can make the existing JSON ",(0,t.kt)("inlineCode",{parentName:"p"},"Decoder")," to rename the existing fields."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.circe.codecs.encoder._\n\nDecoder[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Decoder[A]\n')),(0,t.kt)("h3",{id:"example-1"},"Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.decoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingDecoder: Decoder[Something] =\n    deriveDecoder[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval jsonString =\n  """\n  {\n    "id": 1,\n    "name": "Vibranium Shield",\n    "price": 999999999\n  }\n  """ \n// jsonString: String = """\n//   {\n//     "id": 1,\n//     "name": "Vibranium Shield",\n//     "price": 999999999\n//   }\n//   """\n\nimport io.circe.parser._\ndecode[Something](jsonString)\n// res9: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n')),(0,t.kt)("h3",{id:"comparison-1"},"Comparison"),(0,t.kt)("p",null,"Let's compare it with the ",(0,t.kt)("inlineCode",{parentName:"p"},"Encoder")," without ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields")," syntax."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.decoder._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingDecoder: Decoder[Something] = deriveDecoder\n  implicit val somethingDecoder: Decoder[Something] =\n    originalSomethingDecoder\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval jsonString =\n  """\n  {\n    "id": 1,\n    "name": "Vibranium Shield",\n    "price": 999999999\n  }\n  """\n// jsonString: String = """\n//   {\n//     "id": 1,\n//     "name": "Vibranium Shield",\n//     "price": 999999999\n//   }\n//   """\n\nimport io.circe.parser._\ndecode[Something](jsonString)(Something.originalSomethingDecoder)\n// res11: Either[Error, Something] = Left(\n//   value = DecodingFailure(Attempt to decode value on failed cursor, List(DownField(n)))\n// )\n\ndecode[Something](jsonString)\n// res12: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n')),(0,t.kt)("h2",{id:"codecarenamefields-encoder---decoder"},"Codec","[A]",".renameFields (Encoder +  Decoder)"),(0,t.kt)("p",null,"With ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields"),", you can make the existing JSON ",(0,t.kt)("inlineCode",{parentName:"p"},"Codec")," to rename the existing fields."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import extras.circe.codecs.codec._\n\nCodec[A].renameFields (\n  "name1" -> "newName1",\n  "name2" -> "newName2"\n) // Codec[A]\n')),(0,t.kt)("h3",{id:"example-2"},"Example"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.codec._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  implicit val somethingCodec: Codec[Something] =\n    deriveCodec[Something]\n      .renameFields(\n        "n" -> "id",\n        "s" -> "name"\n      )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\nsomething.asJson\n// res14: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nval jsonString = something.asJson.spaces2\n// jsonString: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n\nimport io.circe.parser._\ndecode[Something](jsonString)\n// res15: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n')),(0,t.kt)("h3",{id:"comparison-2"},"Comparison"),(0,t.kt)("p",null,"Let's compare it with the ",(0,t.kt)("inlineCode",{parentName:"p"},"Encoder")," without ",(0,t.kt)("inlineCode",{parentName:"p"},"renameFields")," syntax."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-scala"},'import io.circe._\nimport io.circe.syntax._\nimport io.circe.generic.semiauto._\nimport extras.circe.codecs.codec._\n\nfinal case class Something(n: Int, s: String, price: BigDecimal)\nobject Something {\n  val originalSomethingCodec: Codec[Something] = deriveCodec\n  implicit val somethingCodec: Codec[Something] = originalSomethingCodec\n    .renameFields(\n      "n" -> "id",\n      "s" -> "name"\n    )\n}\n\nval something = Something(1, "Vibranium Shield", BigDecimal(999999999))\n// something: Something = Something(\n//   n = 1,\n//   s = "Vibranium Shield",\n//   price = 999999999\n// )\n\nSomething.originalSomethingCodec(something)\n// res17: Json = JObject(\n//   value = object[n -> 1,s -> "Vibranium Shield",price -> 999999999]\n// )\nSomething.originalSomethingCodec(something).spaces2\n// res18: String = """{\n//   "n" : 1,\n//   "s" : "Vibranium Shield",\n//   "price" : 999999999\n// }"""\n\nsomething.asJson\n// res19: Json = JObject(\n//   value = object[price -> 999999999,id -> 1,name -> "Vibranium Shield"]\n// )\nval jsonString = something.asJson.spaces2\n// jsonString: String = """{\n//   "price" : 999999999,\n//   "id" : 1,\n//   "name" : "Vibranium Shield"\n// }"""\n\nimport io.circe.parser._\ndecode[Something](jsonString)(Something.originalSomethingCodec)\n// res20: Either[Error, Something] = Left(\n//   value = DecodingFailure(Attempt to decode value on failed cursor, List(DownField(n)))\n// )\n\ndecode[Something](jsonString)\n// res21: Either[Error, Something] = Right(\n//   value = Something(n = 1, s = "Vibranium Shield", price = 999999999)\n// )\n')))}p.isMDXComponent=!0}}]);